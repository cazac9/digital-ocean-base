// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microting.DigitalOceanBase.Infrastructure.Data;

namespace Microting.DigitalOceanBase.Migrations
{
    [DbContext(typeof(DigitalOceanDbContext))]
    [Migration("20200604093302_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microting.DigitalOceanBase.Infrastructure.Data.Entities.Droplet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("BackupsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentImageId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentImageName")
                        .HasColumnType("text");

                    b.Property<int>("CustomerNo")
                        .HasColumnType("int");

                    b.Property<string>("DoUid")
                        .HasColumnType("text");

                    b.Property<bool>("IpV6Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("MonitoringEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("PrivateIpV4")
                        .HasColumnType("text");

                    b.Property<string>("PublicIpV4")
                        .HasColumnType("text");

                    b.Property<string>("PublicIpV6")
                        .HasColumnType("text");

                    b.Property<int>("RequestedImageId")
                        .HasColumnType("int");

                    b.Property<string>("RequestedImageName")
                        .HasColumnType("text");

                    b.Property<int>("Sizeid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("UserData")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Sizeid")
                        .IsUnique();

                    b.ToTable("Droplets");
                });

            modelBuilder.Entity("Microting.DigitalOceanBase.Infrastructure.Data.Entities.DropletTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("DropletId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("DropletId");

                    b.HasIndex("TagId");

                    b.ToTable("DropletTag");
                });

            modelBuilder.Entity("Microting.DigitalOceanBase.Infrastructure.Data.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Distribution")
                        .HasColumnType("text");

                    b.Property<int>("DoUid")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<DateTime>("ImageCreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("MinDiskSize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.Property<double>("SizeGigabytes")
                        .HasColumnType("double");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Microting.DigitalOceanBase.Infrastructure.Data.Entities.PluginConfigurationValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PluginConfigurationValues");
                });

            modelBuilder.Entity("Microting.DigitalOceanBase.Infrastructure.Data.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("SizeId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Microting.DigitalOceanBase.Infrastructure.Data.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Disk")
                        .HasColumnType("int");

                    b.Property<int>("Memory")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceHourly")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PriceMonthly")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<double>("Transfer")
                        .HasColumnType("double");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Vcpus")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("Microting.DigitalOceanBase.Infrastructure.Data.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowState")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Microting.DigitalOceanBase.Infrastructure.Data.Entities.Droplet", b =>
                {
                    b.HasOne("Microting.DigitalOceanBase.Infrastructure.Data.Entities.Size", "Size")
                        .WithOne("Droplet")
                        .HasForeignKey("Microting.DigitalOceanBase.Infrastructure.Data.Entities.Droplet", "Sizeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.DigitalOceanBase.Infrastructure.Data.Entities.DropletTag", b =>
                {
                    b.HasOne("Microting.DigitalOceanBase.Infrastructure.Data.Entities.Droplet", "Droplet")
                        .WithMany("DropletTags")
                        .HasForeignKey("DropletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microting.DigitalOceanBase.Infrastructure.Data.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microting.DigitalOceanBase.Infrastructure.Data.Entities.Region", b =>
                {
                    b.HasOne("Microting.DigitalOceanBase.Infrastructure.Data.Entities.Size", null)
                        .WithMany("Regions")
                        .HasForeignKey("SizeId");
                });
#pragma warning restore 612, 618
        }
    }
}
